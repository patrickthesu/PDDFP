import config
import logging
import parsing
#from telebot import types
from aiogram import Bot, Dispatcher, executor, types

# log level
logging.basicConfig( level=logging.INFO )

# bot init
bot = Bot( token=config.TOKEN )
dp = Dispatcher( bot )

# 


# echo
@dp.message_handler( commands = 'start' )
async def start ( message: types.Message ):
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
	
	item1 = types.KeyboardButton('–ó–∞–¥–∞–Ω–∏—è üìã')
	item2 = types.KeyboardButton('–ü—Ä–æ–π—Ç–∏ —ç–∫–∑–∞–º–µ–Ω üìù')
	item3 = types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')
	item4 = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†')
	markup.add(item1, item2, item3, item4)


	await bot.send_sticker( message.chat.id, 'CAACAgQAAxkBAAECs7VhDkRBFeq3kdWMmW_y6PjDjpm8cAACOhgAAqbxcR6cYA5lHoA_dCAE')
	await bot.send_message( message.chat.id, '''–ü—Ä–∏–≤–µ—Ç, {0.first_name} ! –≠—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —Å–¥–µ–ª–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ü–î–î —Ç–µ—Å—Ç–æ–≤ —Å —Å–∞–π—Ç–∞ vodiy.ua. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∑–∞–Ω–æ–≤–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã. –ß—Ç–æ–∂, –Ω–∏ –≥–≤–æ–∑–¥—è –≤–∞–º, –Ω–µ –∂–µ–∑–ª–∞! –£–¥–∞—á–∏ !!!'''.format( message.from_user ), reply_markup = markup )

	# registing or log in 

@dp.message_handler( content_types = ['text'] )
async def operations ( message ):
	if message.chat.type == 'private':
		if message.text == '–ó–∞–¥–∞–Ω–∏—è üìã':

			markup = types.InlineKeyboardMarkup( row_width = 2 ) 
		
			for i in range(1, 11):
				markup.add( types.InlineKeyboardButton( str(i), callback_data = '{0}'.format(i) ))

			# item1 = types.InlineKeyboardButton( '>> ', callback_data = '>>' )
			item1 = types.InlineKeyboardButton(">>", callback_data='>>')
			item2 = types.InlineKeyboardButton( '...', callback_data = '...' )

			markup.add(item1, item2)

			await bot.send_message( message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —á–∞—Ç', reply_markup = markup )

		elif message.text == '–ü—Ä–æ–π—Ç–∏ —ç–∫–∑–∞–º–µ–Ω üìù':
			await passBilet ( exam = True, chatID = message.chat.id )
		elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä':
			print ('lol')
		else:
			await bot.send_message( message.chat.id, 'https://youtu.be/06IwTULTJmo' )

async def sendQuestion( question, chatID ): 

	global nowQuestion

	nowQuestion = question

	markup = types.InlineKeyboardMarkup( row_width = 2 ) 
	tooLongAns = False
	for i in range ( len ( question.answers ) ) :
		# print ( tooLongAns )
		if ( len ( question.answers[i] ) > 40 and not tooLongAns ) :
			tooLongAns = True
			# print ( len ( question.answers[i] ))
			question.text += "\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n\n"
			for j in range ( len ( question.answers ) ) :
				question.text += ( str ( j + 1 ) + ". " + question.answers[j] + '\n')
		markup.add( types.InlineKeyboardButton( str ( i + 1 ) + '. ' + question.answers[i], callback_data=( 'answer' + str( i ) ) ) )

	if question.img:
		img = open( '1.jpg' , mode='rb' )
		await bot.send_photo( chatID, img, caption = question.text, reply_markup= markup )
	else :
		await bot.send_message( chatID, question.text, reply_markup= markup)

# questNumber = 0
global questNumber
global makedError
global questionsList
global errs

makedError = False
questionsList = None
questNumber = 0
errs = 0

async def passBilet ( biletNum = -1, theme = None, exam = False, chatID = None ):
	global questNumber
	global errs
	global questionsList

	if questNumber == 20:
		if errs > 2 :
			await bot.send_message( chatID, '–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é –≤ –Ω–µ —Å–¥–∞–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç( . \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {0}. \n–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: 20. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: {1}%'.format( errs, ( 100 - ( errs / 20 * 100 ) ) ) )
		elif errs == 0: 
			await bot.send_message( chatID, 'üéâüéâüéäüéä–ï–π—Å!!! –≠—Ç–æ –≤–∑—Ä—ã–≤, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º !!!üéâüéâüéäüéä')
		else :
			await bot.send_message( chatID, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —Å–¥–∞–ª–∏ —Ç–µ—Å—Ç ! \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {0}. \n–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: 20. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: {1}%'.format( errs, ( 100 - ( errs / 20 * 100 ) ) ) )
		questionsList = None
		questNumber = 0
		errs = 0
		return 0

	global mode
	mode = 'pass'

	if questionsList == None:
		questionsList = parsing.getBiletOrTheme( bilet = biletNum, theme = theme, exam = exam )
		
	question = parsing.getQuestion( number = questNumber, qusestionsList = questionsList )
	question.text = str( questNumber + 1 ) + '/20 \n' + question.text

	await sendQuestion ( question, chatID = chatID )
	# print (questNumber)
	questNumber += 1

@dp.callback_query_handler()
async def process_callback(call):
	try:
		if call.message:
			
			if call.data == '>>':
				await bot.send_message(call.message.chat.id, 'aaa')
			elif call.data == '...':
				await bot.send_message(call.message.chat.id, 'aaa')
			elif 'answer' in call.data :
				global errs
				global mode

				if str( nowQuestion.correctAnswerI ) in call.data :
					await bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ") 

					if mode == 'pass':
						global makedError 
						if not makedError:
							await bot.delete_message( message_id=call.message.message_id, chat_id=call.message.chat.id ) 

					makedError = False
					# print ( makedError )

					await passBilet( chatID =  call.message.chat.id, biletNum = 1  )

				else :
					await bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="‚ùå –û—à–∏–±–∫–∞! ‚ùå")

					if mode == 'pass':

						makedError = True
						errs += 1
						
			elif str ( call.data in range ( 1, 100 )) :
				await passBilet( chatID =  call.message.chat.id, biletNum = call.data,  )

	except Exception as e:
		print(repr(e))

# run long-polling
executor.start_polling( dp )

